//
//¬† TasksInteractor.swift
//¬† effectivemobile
//
//¬† Created by ellkaden on 23.09.2025.
//

import Foundation

class TasksInteractor: TasksInteractorInputProtocol {
    
    
    weak var presenter: TasksInteractorOutputProtocol?
    var coreDataManager: CoreDataManager?
    var apiService: APIService?
    

    func fetchTasks(with predicate: NSPredicate? = nil) {
        
        // 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É (–≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
        DispatchQueue.main.async { [weak self] in
            self?.presenter?.showLoading()
        }
        
        // 2. –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É/—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        DispatchQueue.global(qos: .userInitiated).async { [weak self] in
            guard let self = self else { return }
            print("Interactor: Initiating data fetch with predicate: \(predicate != nil ? "YES" : "NO")")
            
            // 3. ‚úÖ –ö–õ–Æ–ß–ï–í–û–ô –®–ê–ì: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–∏–∫–∞—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Core Data
            let fetchedTodos = self.coreDataManager?.fetchTodos(with: predicate) ?? []
            
            // –ï—Å–ª–∏ Core Data –≤–µ—Ä–Ω—É–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–∞–∂–µ –ø—É—Å—Ç–æ–π), –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ.
            // –õ–æ–≥–∏–∫–∞ API –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Core Data –í–û–û–ë–©–ï –ø—É—Å—Ç–∞.
            if fetchedTodos.isEmpty && predicate == nil {
                // –ï—Å–ª–∏ –Ω–µ—Ç –∫–µ—à–∞ –∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞, —Ç–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API
                self.loadFromAPI()
            } else {
                // 4. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Presenter'—É
                let viewModels = fetchedTodos.map { todo in
                    return TaskViewModel(
                        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Int, –∞ –Ω–µ Int64
                        id: Int64(Int(todo.id)),
                        name: todo.name ?? "",
                        description: todo.todoDescription ?? "",
                        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–¢–´: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à DateFormatter –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                        creationDate: todo.creationDate != nil ? DateFormatter.appDateFormat.string(from: todo.creationDate!) : "",
                        isCompleted: todo.isCompleted
                    )
                }
                
                DispatchQueue.main.async {
                    self.presenter?.didFetchTasks(viewModels)
                    self.presenter?.hideLoading()
                }
            }
        }
    }
    
    private func loadFromAPI() {
        self.apiService?.fetchTodos { [weak self] result in
            guard let self = self else { return }
            
            // ... (–ª–æ–≥–∏–∫–∞ API - –æ–Ω–∞ —É –≤–∞—Å –≤–µ—Ä–Ω–∞)
            switch result {
            case .success(let apiTodos):
                let viewModels = apiTodos.map { apiTodo in
                    // –ó–¥–µ—Å—å —Ç–∞–∫–∂–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å apiTodos –≤ Core Data
                    // self.coreDataManager?.save(from: apiTodo) // <-- –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–± —ç—Ç–æ–º
                    return TaskViewModel(
                        id: Int64(apiTodo.id),
                        name: apiTodo.todo,
                        description: apiTodo.todo,
                        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–¢–´: –°–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
                        creationDate: DateFormatter.appDateFormat.string(from: Date()), // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é –¥–∞—Ç—É, –µ—Å–ª–∏ API –µ–µ –Ω–µ –¥–∞–µ—Ç
                        isCompleted: apiTodo.completed
                    )
                }
                DispatchQueue.main.async {
                    self.presenter?.didFetchTasks(viewModels)
                    self.presenter?.hideLoading()
                }
            case .failure(let error):
                DispatchQueue.main.async {
                    self.presenter?.didFailToFetchTasks(with: error)
                    self.presenter?.hideLoading()
                }
            }
        }
    }

    private func generateRandomDateString() -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd.MM.yyyy"
        let randomTimeInterval = TimeInterval.random(in: -3600 * 24 * 365...0)
        let randomDate = Date().addingTimeInterval(randomTimeInterval)
        return formatter.string(from: randomDate)
    }
    
    func deleteTask(withID id: Int) {
        // –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤ Core Data –Ω–∞ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        DispatchQueue.global(qos: .utility).async { [weak self] in
            self?.coreDataManager?.deleteTodo(withID: id)
            // –ó–¥–µ—Å—å Presenter'—É –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ —Å–æ–æ–±—â–∞—Ç—å,
            // —Ç.–∫. View —É–∂–µ –æ–±–Ω–æ–≤–∏–ª—Å—è.
        }
    }

}


extension TasksInteractor: DetailInteractorInputProtocol {
//    func saveNewTask(title: String, description: String) {
//        // 1. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
//        
//        // üí° –ù–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ 'title' –≤ —Å–≤–æ–π—Å—Ç–≤–æ 'todo'
//        // üí° –ù–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ 'description' –≤ –∫–∞–∫–æ–µ-—Ç–æ –ø–æ–ª–µ (–º—ã –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ –ø–æ–∫–∞)
//        // üí° –ù–∞–º –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è 'userId'
//        
//        let newTaskData = APITodo(
//            id: Int.random(in: 1000...9999), // –í—Ä–µ–º–µ–Ω–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
//            
//            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–≤–æ–π—Å—Ç–≤–æ 'todo' (–∏–∑ APITodo) –±–µ—Ä–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ 'title'
//            todo: title,
//            
//            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–≤–æ–π—Å—Ç–≤–æ 'completed' –±–µ—Ä–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ 'isCompleted'
//            completed: false, // –¢–µ–ø–µ—Ä—å 'completed'
//            
//            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π 'userId'
//            userId: 1 // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π userId –∏–ª–∏ –∑–∞–≥–ª—É—à–∫—É
//        )
//        
//        // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Core Data
//        coreDataManager?.save(from: newTaskData)
//        
//        // 3. (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û) –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
//        // ...
//    }
    
    func updateTask(id: Int, title: String, description: String) {
        
        // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ CoreDataManager –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á–∏ –ø–æ ID
        // –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ–µ –¥–∞–Ω–Ω—ã—Ö.
        coreDataManager?.updateTask(
            with: Int(id), // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
            newTitle: title,
            newDescription: description
        )
        
        // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ï—Å–ª–∏ CoreDataManager.updateTask() –±—Ä–æ—Å–∞–µ—Ç –æ—à–∏–±–∫—É,
        // –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É (–Ω–æ –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–∞ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–∫).
    }
    
    func saveNewTask(title: String, description: String) {
                
        // ‚úÖ –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—à–ª–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞
        print("Interactor: –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏: \(title)")
        
        // 1. –°–æ–∑–¥–∞–Ω–∏–µ APITodo (–¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ Core Data Manager)
        let newTaskData = APITodo(
            id: Int.random(in: 1000...9999),
            todo: title,
            completed: false,
            userId: 1
        )
        
        // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Core Data
        let savedTodo = coreDataManager?.save(from: newTaskData, description: description)

        if savedTodo == nil {
            print("Interactor: CoreDataManager.save –≤–µ—Ä–Ω—É–ª nil. –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Core Data.")
        } else {
            print("Interactor: CoreDataManager.save —É—Å–ø–µ—à–Ω–æ –≤—ã–∑–≤–∞–Ω.")
        }
    }
}

