//
//  CoreDataManager.swift
//  effectivemobile
//
//  Created by ellkaden on 23.09.2025.
//

import Foundation
import CoreData

class CoreDataManager {
    
    static let shared = CoreDataManager()
    
    lazy var persistentContainer: NSPersistentContainer = {
        let container = NSPersistentContainer(name: "YourDataModelName")
        container.loadPersistentStores { (storeDescription, error) in
            if let error = error as NSError? {
                fatalError("Unresolved error \(error), \(error.userInfo)")
            }
        }
        return container
    }()
    
    var context: NSManagedObjectContext {
        return persistentContainer.viewContext
    }
    
    func saveContext() {
        if context.hasChanges {
            do {
                try context.save()
            } catch {
                let nserror = error as NSError
                fatalError("Unresolved error \(nserror), \(nserror.userInfo)")
            }
        }
    }
    
    // CoreDataManager.swift
    
    // This method will take the API data and create a Core Data object.
    func save(from apiTodo: APITodo, description: String) -> Todo? {
        let context = persistentContainer.viewContext
        
        // –ï—Å–ª–∏ —Å—É—â–Ω–æ—Å—Ç—å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ Todo, –∑–∞–º–µ–Ω–∏—Ç–µ –∏–º—è –∑–¥–µ—Å—å:
        let todoEntity = Todo(context: context)
        
        // –ì–ê–†–ê–ù–¢–ò–Ø: –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –í–°–ï–• –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–• –ü–û–õ–ï–ô
        
        // 1. id (Int64)
        todoEntity.id = Int64(apiTodo.id)
        
        // 2. name (String)
        todoEntity.name = apiTodo.todo ?? "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"  // <-- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≥–ª—É—à–∫—É

        // 3. todoDescription (String)
        todoEntity.todoDescription = description       // ‚úÖ –§–ò–ö–°: –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ description
        
        // 4. isCompleted (Bool)
        todoEntity.isCompleted = apiTodo.completed
        
        // 5. creationDate (Date)
        todoEntity.creationDate = Date()               // ‚úÖ –§–ò–ö–°: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        
        do {
            try context.save()
            print("‚úÖ CoreData: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.")
            return todoEntity
        } catch {
            let nserror = error as NSError
            // üö® –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞, –µ—Å–ª–∏ –æ–Ω–∞ –≤—Å–µ –µ—â–µ –µ—Å—Ç—å!
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê CORE DATA: \(nserror), \(nserror.userInfo)")
            return nil
        }
    }
    
    func fetchTodos(with predicate: NSPredicate? = nil) -> [Todo]? {
        let context = persistentContainer.viewContext
        let fetchRequest: NSFetchRequest<Todo> = Todo.fetchRequest()
        
        fetchRequest.predicate = predicate

        do {
            let todos = try context.fetch(fetchRequest)
            return todos
        } catch let error {
            print("Failed to fetch todos: \(error)")
            return nil
        }
    }
    
    // –í CoreDataManager.swift

    // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥:
    func deleteTodo(withID id: Int) {
        let context = persistentContainer.viewContext
        let fetchRequest: NSFetchRequest<Todo> = Todo.fetchRequest()
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–∏–∫–∞—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ ID
        fetchRequest.predicate = NSPredicate(format: "id == %d", id)
        
        do {
            let results = try context.fetch(fetchRequest)
            if let todoToDelete = results.first {
                context.delete(todoToDelete)
                saveContext() // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            }
        } catch {
            print("Failed to delete todo with ID \(id): \(error.localizedDescription)")
        }
    }
    
    func updateTask(with id: Int, newTitle: String, newDescription: String) {
        let context = persistentContainer.viewContext
        
        // 1. ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º Todo.fetchRequest()
        let fetchRequest: NSFetchRequest<Todo> = Todo.fetchRequest() // –ë—ã–ª–æ TaskEntity
        
        // 2. –ò—â–µ–º –∑–∞–¥–∞—á—É —Å –Ω—É–∂–Ω—ã–º ID
        fetchRequest.predicate = NSPredicate(format: "id == %d", id)
        
        do {
            let tasks = try context.fetch(fetchRequest)
            
            if let taskToUpdate = tasks.first {
                // 3. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Å—É—â–Ω–æ—Å—Ç–∏
                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
                taskToUpdate.name = newTitle // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'name', –∫–∞–∫ –≤ save
                taskToUpdate.todoDescription = newDescription
                taskToUpdate.creationDate = Date()
                
                // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                try context.save()
                print("‚úÖ –ó–∞–¥–∞—á–∞ —Å ID \(id) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            } else {
                print("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å ID \(id) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Core Data: \(error)")
        }
    }}
